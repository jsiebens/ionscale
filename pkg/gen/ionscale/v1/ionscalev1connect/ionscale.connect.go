// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ionscale/v1/ionscale.proto

package ionscalev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/jsiebens/ionscale/pkg/gen/ionscale/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IonscaleServiceName is the fully-qualified name of the IonscaleService service.
	IonscaleServiceName = "ionscale.v1.IonscaleService"
)

// IonscaleServiceClient is a client for the ionscale.v1.IonscaleService service.
type IonscaleServiceClient interface {
	GetVersion(context.Context, *connect_go.Request[v1.GetVersionRequest]) (*connect_go.Response[v1.GetVersionResponse], error)
	Authenticate(context.Context, *connect_go.Request[v1.AuthenticateRequest]) (*connect_go.ServerStreamForClient[v1.AuthenticateResponse], error)
	GetDefaultDERPMap(context.Context, *connect_go.Request[v1.GetDefaultDERPMapRequest]) (*connect_go.Response[v1.GetDefaultDERPMapResponse], error)
	SetDefaultDERPMap(context.Context, *connect_go.Request[v1.SetDefaultDERPMapRequest]) (*connect_go.Response[v1.SetDefaultDERPMapResponse], error)
	ResetDefaultDERPMap(context.Context, *connect_go.Request[v1.ResetDefaultDERPMapRequest]) (*connect_go.Response[v1.ResetDefaultDERPMapResponse], error)
	CreateTailnet(context.Context, *connect_go.Request[v1.CreateTailnetRequest]) (*connect_go.Response[v1.CreateTailnetResponse], error)
	GetTailnet(context.Context, *connect_go.Request[v1.GetTailnetRequest]) (*connect_go.Response[v1.GetTailnetResponse], error)
	ListTailnets(context.Context, *connect_go.Request[v1.ListTailnetsRequest]) (*connect_go.Response[v1.ListTailnetsResponse], error)
	DeleteTailnet(context.Context, *connect_go.Request[v1.DeleteTailnetRequest]) (*connect_go.Response[v1.DeleteTailnetResponse], error)
	GetDERPMap(context.Context, *connect_go.Request[v1.GetDERPMapRequest]) (*connect_go.Response[v1.GetDERPMapResponse], error)
	SetDERPMap(context.Context, *connect_go.Request[v1.SetDERPMapRequest]) (*connect_go.Response[v1.SetDERPMapResponse], error)
	ResetDERPMap(context.Context, *connect_go.Request[v1.ResetDERPMapRequest]) (*connect_go.Response[v1.ResetDERPMapResponse], error)
	EnableFileSharing(context.Context, *connect_go.Request[v1.EnableFileSharingRequest]) (*connect_go.Response[v1.EnableFileSharingResponse], error)
	DisableFileSharing(context.Context, *connect_go.Request[v1.DisableFileSharingRequest]) (*connect_go.Response[v1.DisableFileSharingResponse], error)
	EnableServiceCollection(context.Context, *connect_go.Request[v1.EnableServiceCollectionRequest]) (*connect_go.Response[v1.EnableServiceCollectionResponse], error)
	DisableServiceCollection(context.Context, *connect_go.Request[v1.DisableServiceCollectionRequest]) (*connect_go.Response[v1.DisableServiceCollectionResponse], error)
	EnableSSH(context.Context, *connect_go.Request[v1.EnableSSHRequest]) (*connect_go.Response[v1.EnableSSHResponse], error)
	DisableSSH(context.Context, *connect_go.Request[v1.DisableSSHRequest]) (*connect_go.Response[v1.DisableSSHResponse], error)
	GetDNSConfig(context.Context, *connect_go.Request[v1.GetDNSConfigRequest]) (*connect_go.Response[v1.GetDNSConfigResponse], error)
	SetDNSConfig(context.Context, *connect_go.Request[v1.SetDNSConfigRequest]) (*connect_go.Response[v1.SetDNSConfigResponse], error)
	GetIAMPolicy(context.Context, *connect_go.Request[v1.GetIAMPolicyRequest]) (*connect_go.Response[v1.GetIAMPolicyResponse], error)
	SetIAMPolicy(context.Context, *connect_go.Request[v1.SetIAMPolicyRequest]) (*connect_go.Response[v1.SetIAMPolicyResponse], error)
	GetACLPolicy(context.Context, *connect_go.Request[v1.GetACLPolicyRequest]) (*connect_go.Response[v1.GetACLPolicyResponse], error)
	SetACLPolicy(context.Context, *connect_go.Request[v1.SetACLPolicyRequest]) (*connect_go.Response[v1.SetACLPolicyResponse], error)
	GetAuthKey(context.Context, *connect_go.Request[v1.GetAuthKeyRequest]) (*connect_go.Response[v1.GetAuthKeyResponse], error)
	CreateAuthKey(context.Context, *connect_go.Request[v1.CreateAuthKeyRequest]) (*connect_go.Response[v1.CreateAuthKeyResponse], error)
	DeleteAuthKey(context.Context, *connect_go.Request[v1.DeleteAuthKeyRequest]) (*connect_go.Response[v1.DeleteAuthKeyResponse], error)
	ListAuthKeys(context.Context, *connect_go.Request[v1.ListAuthKeysRequest]) (*connect_go.Response[v1.ListAuthKeysResponse], error)
	ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error)
	DeleteUser(context.Context, *connect_go.Request[v1.DeleteUserRequest]) (*connect_go.Response[v1.DeleteUserResponse], error)
	GetMachine(context.Context, *connect_go.Request[v1.GetMachineRequest]) (*connect_go.Response[v1.GetMachineResponse], error)
	ListMachines(context.Context, *connect_go.Request[v1.ListMachinesRequest]) (*connect_go.Response[v1.ListMachinesResponse], error)
	ExpireMachine(context.Context, *connect_go.Request[v1.ExpireMachineRequest]) (*connect_go.Response[v1.ExpireMachineResponse], error)
	DeleteMachine(context.Context, *connect_go.Request[v1.DeleteMachineRequest]) (*connect_go.Response[v1.DeleteMachineResponse], error)
	SetMachineKeyExpiry(context.Context, *connect_go.Request[v1.SetMachineKeyExpiryRequest]) (*connect_go.Response[v1.SetMachineKeyExpiryResponse], error)
	GetMachineRoutes(context.Context, *connect_go.Request[v1.GetMachineRoutesRequest]) (*connect_go.Response[v1.GetMachineRoutesResponse], error)
	EnableMachineRoutes(context.Context, *connect_go.Request[v1.EnableMachineRoutesRequest]) (*connect_go.Response[v1.EnableMachineRoutesResponse], error)
	DisableMachineRoutes(context.Context, *connect_go.Request[v1.DisableMachineRoutesRequest]) (*connect_go.Response[v1.DisableMachineRoutesResponse], error)
	EnableExitNode(context.Context, *connect_go.Request[v1.EnableExitNodeRequest]) (*connect_go.Response[v1.EnableExitNodeResponse], error)
	DisableExitNode(context.Context, *connect_go.Request[v1.DisableExitNodeRequest]) (*connect_go.Response[v1.DisableExitNodeResponse], error)
	EnableHttpsCertificates(context.Context, *connect_go.Request[v1.EnableHttpsCertificatesRequest]) (*connect_go.Response[v1.EnableHttpsCertificatesResponse], error)
	DisableHttpsCertificates(context.Context, *connect_go.Request[v1.DisableHttpsCertificatesRequest]) (*connect_go.Response[v1.DisableHttpsCertificatesResponse], error)
}

// NewIonscaleServiceClient constructs a client for the ionscale.v1.IonscaleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIonscaleServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IonscaleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &ionscaleServiceClient{
		getVersion: connect_go.NewClient[v1.GetVersionRequest, v1.GetVersionResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetVersion",
			opts...,
		),
		authenticate: connect_go.NewClient[v1.AuthenticateRequest, v1.AuthenticateResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/Authenticate",
			opts...,
		),
		getDefaultDERPMap: connect_go.NewClient[v1.GetDefaultDERPMapRequest, v1.GetDefaultDERPMapResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetDefaultDERPMap",
			opts...,
		),
		setDefaultDERPMap: connect_go.NewClient[v1.SetDefaultDERPMapRequest, v1.SetDefaultDERPMapResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/SetDefaultDERPMap",
			opts...,
		),
		resetDefaultDERPMap: connect_go.NewClient[v1.ResetDefaultDERPMapRequest, v1.ResetDefaultDERPMapResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/ResetDefaultDERPMap",
			opts...,
		),
		createTailnet: connect_go.NewClient[v1.CreateTailnetRequest, v1.CreateTailnetResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/CreateTailnet",
			opts...,
		),
		getTailnet: connect_go.NewClient[v1.GetTailnetRequest, v1.GetTailnetResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetTailnet",
			opts...,
		),
		listTailnets: connect_go.NewClient[v1.ListTailnetsRequest, v1.ListTailnetsResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/ListTailnets",
			opts...,
		),
		deleteTailnet: connect_go.NewClient[v1.DeleteTailnetRequest, v1.DeleteTailnetResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/DeleteTailnet",
			opts...,
		),
		getDERPMap: connect_go.NewClient[v1.GetDERPMapRequest, v1.GetDERPMapResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetDERPMap",
			opts...,
		),
		setDERPMap: connect_go.NewClient[v1.SetDERPMapRequest, v1.SetDERPMapResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/SetDERPMap",
			opts...,
		),
		resetDERPMap: connect_go.NewClient[v1.ResetDERPMapRequest, v1.ResetDERPMapResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/ResetDERPMap",
			opts...,
		),
		enableFileSharing: connect_go.NewClient[v1.EnableFileSharingRequest, v1.EnableFileSharingResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/EnableFileSharing",
			opts...,
		),
		disableFileSharing: connect_go.NewClient[v1.DisableFileSharingRequest, v1.DisableFileSharingResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/DisableFileSharing",
			opts...,
		),
		enableServiceCollection: connect_go.NewClient[v1.EnableServiceCollectionRequest, v1.EnableServiceCollectionResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/EnableServiceCollection",
			opts...,
		),
		disableServiceCollection: connect_go.NewClient[v1.DisableServiceCollectionRequest, v1.DisableServiceCollectionResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/DisableServiceCollection",
			opts...,
		),
		enableSSH: connect_go.NewClient[v1.EnableSSHRequest, v1.EnableSSHResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/EnableSSH",
			opts...,
		),
		disableSSH: connect_go.NewClient[v1.DisableSSHRequest, v1.DisableSSHResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/DisableSSH",
			opts...,
		),
		getDNSConfig: connect_go.NewClient[v1.GetDNSConfigRequest, v1.GetDNSConfigResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetDNSConfig",
			opts...,
		),
		setDNSConfig: connect_go.NewClient[v1.SetDNSConfigRequest, v1.SetDNSConfigResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/SetDNSConfig",
			opts...,
		),
		getIAMPolicy: connect_go.NewClient[v1.GetIAMPolicyRequest, v1.GetIAMPolicyResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetIAMPolicy",
			opts...,
		),
		setIAMPolicy: connect_go.NewClient[v1.SetIAMPolicyRequest, v1.SetIAMPolicyResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/SetIAMPolicy",
			opts...,
		),
		getACLPolicy: connect_go.NewClient[v1.GetACLPolicyRequest, v1.GetACLPolicyResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetACLPolicy",
			opts...,
		),
		setACLPolicy: connect_go.NewClient[v1.SetACLPolicyRequest, v1.SetACLPolicyResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/SetACLPolicy",
			opts...,
		),
		getAuthKey: connect_go.NewClient[v1.GetAuthKeyRequest, v1.GetAuthKeyResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetAuthKey",
			opts...,
		),
		createAuthKey: connect_go.NewClient[v1.CreateAuthKeyRequest, v1.CreateAuthKeyResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/CreateAuthKey",
			opts...,
		),
		deleteAuthKey: connect_go.NewClient[v1.DeleteAuthKeyRequest, v1.DeleteAuthKeyResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/DeleteAuthKey",
			opts...,
		),
		listAuthKeys: connect_go.NewClient[v1.ListAuthKeysRequest, v1.ListAuthKeysResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/ListAuthKeys",
			opts...,
		),
		listUsers: connect_go.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/ListUsers",
			opts...,
		),
		deleteUser: connect_go.NewClient[v1.DeleteUserRequest, v1.DeleteUserResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/DeleteUser",
			opts...,
		),
		getMachine: connect_go.NewClient[v1.GetMachineRequest, v1.GetMachineResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetMachine",
			opts...,
		),
		listMachines: connect_go.NewClient[v1.ListMachinesRequest, v1.ListMachinesResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/ListMachines",
			opts...,
		),
		expireMachine: connect_go.NewClient[v1.ExpireMachineRequest, v1.ExpireMachineResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/ExpireMachine",
			opts...,
		),
		deleteMachine: connect_go.NewClient[v1.DeleteMachineRequest, v1.DeleteMachineResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/DeleteMachine",
			opts...,
		),
		setMachineKeyExpiry: connect_go.NewClient[v1.SetMachineKeyExpiryRequest, v1.SetMachineKeyExpiryResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/SetMachineKeyExpiry",
			opts...,
		),
		getMachineRoutes: connect_go.NewClient[v1.GetMachineRoutesRequest, v1.GetMachineRoutesResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/GetMachineRoutes",
			opts...,
		),
		enableMachineRoutes: connect_go.NewClient[v1.EnableMachineRoutesRequest, v1.EnableMachineRoutesResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/EnableMachineRoutes",
			opts...,
		),
		disableMachineRoutes: connect_go.NewClient[v1.DisableMachineRoutesRequest, v1.DisableMachineRoutesResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/DisableMachineRoutes",
			opts...,
		),
		enableExitNode: connect_go.NewClient[v1.EnableExitNodeRequest, v1.EnableExitNodeResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/EnableExitNode",
			opts...,
		),
		disableExitNode: connect_go.NewClient[v1.DisableExitNodeRequest, v1.DisableExitNodeResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/DisableExitNode",
			opts...,
		),
		enableHttpsCertificates: connect_go.NewClient[v1.EnableHttpsCertificatesRequest, v1.EnableHttpsCertificatesResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/EnableHttpsCertificates",
			opts...,
		),
		disableHttpsCertificates: connect_go.NewClient[v1.DisableHttpsCertificatesRequest, v1.DisableHttpsCertificatesResponse](
			httpClient,
			baseURL+"/ionscale.v1.IonscaleService/DisableHttpsCertificates",
			opts...,
		),
	}
}

// ionscaleServiceClient implements IonscaleServiceClient.
type ionscaleServiceClient struct {
	getVersion               *connect_go.Client[v1.GetVersionRequest, v1.GetVersionResponse]
	authenticate             *connect_go.Client[v1.AuthenticateRequest, v1.AuthenticateResponse]
	getDefaultDERPMap        *connect_go.Client[v1.GetDefaultDERPMapRequest, v1.GetDefaultDERPMapResponse]
	setDefaultDERPMap        *connect_go.Client[v1.SetDefaultDERPMapRequest, v1.SetDefaultDERPMapResponse]
	resetDefaultDERPMap      *connect_go.Client[v1.ResetDefaultDERPMapRequest, v1.ResetDefaultDERPMapResponse]
	createTailnet            *connect_go.Client[v1.CreateTailnetRequest, v1.CreateTailnetResponse]
	getTailnet               *connect_go.Client[v1.GetTailnetRequest, v1.GetTailnetResponse]
	listTailnets             *connect_go.Client[v1.ListTailnetsRequest, v1.ListTailnetsResponse]
	deleteTailnet            *connect_go.Client[v1.DeleteTailnetRequest, v1.DeleteTailnetResponse]
	getDERPMap               *connect_go.Client[v1.GetDERPMapRequest, v1.GetDERPMapResponse]
	setDERPMap               *connect_go.Client[v1.SetDERPMapRequest, v1.SetDERPMapResponse]
	resetDERPMap             *connect_go.Client[v1.ResetDERPMapRequest, v1.ResetDERPMapResponse]
	enableFileSharing        *connect_go.Client[v1.EnableFileSharingRequest, v1.EnableFileSharingResponse]
	disableFileSharing       *connect_go.Client[v1.DisableFileSharingRequest, v1.DisableFileSharingResponse]
	enableServiceCollection  *connect_go.Client[v1.EnableServiceCollectionRequest, v1.EnableServiceCollectionResponse]
	disableServiceCollection *connect_go.Client[v1.DisableServiceCollectionRequest, v1.DisableServiceCollectionResponse]
	enableSSH                *connect_go.Client[v1.EnableSSHRequest, v1.EnableSSHResponse]
	disableSSH               *connect_go.Client[v1.DisableSSHRequest, v1.DisableSSHResponse]
	getDNSConfig             *connect_go.Client[v1.GetDNSConfigRequest, v1.GetDNSConfigResponse]
	setDNSConfig             *connect_go.Client[v1.SetDNSConfigRequest, v1.SetDNSConfigResponse]
	getIAMPolicy             *connect_go.Client[v1.GetIAMPolicyRequest, v1.GetIAMPolicyResponse]
	setIAMPolicy             *connect_go.Client[v1.SetIAMPolicyRequest, v1.SetIAMPolicyResponse]
	getACLPolicy             *connect_go.Client[v1.GetACLPolicyRequest, v1.GetACLPolicyResponse]
	setACLPolicy             *connect_go.Client[v1.SetACLPolicyRequest, v1.SetACLPolicyResponse]
	getAuthKey               *connect_go.Client[v1.GetAuthKeyRequest, v1.GetAuthKeyResponse]
	createAuthKey            *connect_go.Client[v1.CreateAuthKeyRequest, v1.CreateAuthKeyResponse]
	deleteAuthKey            *connect_go.Client[v1.DeleteAuthKeyRequest, v1.DeleteAuthKeyResponse]
	listAuthKeys             *connect_go.Client[v1.ListAuthKeysRequest, v1.ListAuthKeysResponse]
	listUsers                *connect_go.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	deleteUser               *connect_go.Client[v1.DeleteUserRequest, v1.DeleteUserResponse]
	getMachine               *connect_go.Client[v1.GetMachineRequest, v1.GetMachineResponse]
	listMachines             *connect_go.Client[v1.ListMachinesRequest, v1.ListMachinesResponse]
	expireMachine            *connect_go.Client[v1.ExpireMachineRequest, v1.ExpireMachineResponse]
	deleteMachine            *connect_go.Client[v1.DeleteMachineRequest, v1.DeleteMachineResponse]
	setMachineKeyExpiry      *connect_go.Client[v1.SetMachineKeyExpiryRequest, v1.SetMachineKeyExpiryResponse]
	getMachineRoutes         *connect_go.Client[v1.GetMachineRoutesRequest, v1.GetMachineRoutesResponse]
	enableMachineRoutes      *connect_go.Client[v1.EnableMachineRoutesRequest, v1.EnableMachineRoutesResponse]
	disableMachineRoutes     *connect_go.Client[v1.DisableMachineRoutesRequest, v1.DisableMachineRoutesResponse]
	enableExitNode           *connect_go.Client[v1.EnableExitNodeRequest, v1.EnableExitNodeResponse]
	disableExitNode          *connect_go.Client[v1.DisableExitNodeRequest, v1.DisableExitNodeResponse]
	enableHttpsCertificates  *connect_go.Client[v1.EnableHttpsCertificatesRequest, v1.EnableHttpsCertificatesResponse]
	disableHttpsCertificates *connect_go.Client[v1.DisableHttpsCertificatesRequest, v1.DisableHttpsCertificatesResponse]
}

// GetVersion calls ionscale.v1.IonscaleService.GetVersion.
func (c *ionscaleServiceClient) GetVersion(ctx context.Context, req *connect_go.Request[v1.GetVersionRequest]) (*connect_go.Response[v1.GetVersionResponse], error) {
	return c.getVersion.CallUnary(ctx, req)
}

// Authenticate calls ionscale.v1.IonscaleService.Authenticate.
func (c *ionscaleServiceClient) Authenticate(ctx context.Context, req *connect_go.Request[v1.AuthenticateRequest]) (*connect_go.ServerStreamForClient[v1.AuthenticateResponse], error) {
	return c.authenticate.CallServerStream(ctx, req)
}

// GetDefaultDERPMap calls ionscale.v1.IonscaleService.GetDefaultDERPMap.
func (c *ionscaleServiceClient) GetDefaultDERPMap(ctx context.Context, req *connect_go.Request[v1.GetDefaultDERPMapRequest]) (*connect_go.Response[v1.GetDefaultDERPMapResponse], error) {
	return c.getDefaultDERPMap.CallUnary(ctx, req)
}

// SetDefaultDERPMap calls ionscale.v1.IonscaleService.SetDefaultDERPMap.
func (c *ionscaleServiceClient) SetDefaultDERPMap(ctx context.Context, req *connect_go.Request[v1.SetDefaultDERPMapRequest]) (*connect_go.Response[v1.SetDefaultDERPMapResponse], error) {
	return c.setDefaultDERPMap.CallUnary(ctx, req)
}

// ResetDefaultDERPMap calls ionscale.v1.IonscaleService.ResetDefaultDERPMap.
func (c *ionscaleServiceClient) ResetDefaultDERPMap(ctx context.Context, req *connect_go.Request[v1.ResetDefaultDERPMapRequest]) (*connect_go.Response[v1.ResetDefaultDERPMapResponse], error) {
	return c.resetDefaultDERPMap.CallUnary(ctx, req)
}

// CreateTailnet calls ionscale.v1.IonscaleService.CreateTailnet.
func (c *ionscaleServiceClient) CreateTailnet(ctx context.Context, req *connect_go.Request[v1.CreateTailnetRequest]) (*connect_go.Response[v1.CreateTailnetResponse], error) {
	return c.createTailnet.CallUnary(ctx, req)
}

// GetTailnet calls ionscale.v1.IonscaleService.GetTailnet.
func (c *ionscaleServiceClient) GetTailnet(ctx context.Context, req *connect_go.Request[v1.GetTailnetRequest]) (*connect_go.Response[v1.GetTailnetResponse], error) {
	return c.getTailnet.CallUnary(ctx, req)
}

// ListTailnets calls ionscale.v1.IonscaleService.ListTailnets.
func (c *ionscaleServiceClient) ListTailnets(ctx context.Context, req *connect_go.Request[v1.ListTailnetsRequest]) (*connect_go.Response[v1.ListTailnetsResponse], error) {
	return c.listTailnets.CallUnary(ctx, req)
}

// DeleteTailnet calls ionscale.v1.IonscaleService.DeleteTailnet.
func (c *ionscaleServiceClient) DeleteTailnet(ctx context.Context, req *connect_go.Request[v1.DeleteTailnetRequest]) (*connect_go.Response[v1.DeleteTailnetResponse], error) {
	return c.deleteTailnet.CallUnary(ctx, req)
}

// GetDERPMap calls ionscale.v1.IonscaleService.GetDERPMap.
func (c *ionscaleServiceClient) GetDERPMap(ctx context.Context, req *connect_go.Request[v1.GetDERPMapRequest]) (*connect_go.Response[v1.GetDERPMapResponse], error) {
	return c.getDERPMap.CallUnary(ctx, req)
}

// SetDERPMap calls ionscale.v1.IonscaleService.SetDERPMap.
func (c *ionscaleServiceClient) SetDERPMap(ctx context.Context, req *connect_go.Request[v1.SetDERPMapRequest]) (*connect_go.Response[v1.SetDERPMapResponse], error) {
	return c.setDERPMap.CallUnary(ctx, req)
}

// ResetDERPMap calls ionscale.v1.IonscaleService.ResetDERPMap.
func (c *ionscaleServiceClient) ResetDERPMap(ctx context.Context, req *connect_go.Request[v1.ResetDERPMapRequest]) (*connect_go.Response[v1.ResetDERPMapResponse], error) {
	return c.resetDERPMap.CallUnary(ctx, req)
}

// EnableFileSharing calls ionscale.v1.IonscaleService.EnableFileSharing.
func (c *ionscaleServiceClient) EnableFileSharing(ctx context.Context, req *connect_go.Request[v1.EnableFileSharingRequest]) (*connect_go.Response[v1.EnableFileSharingResponse], error) {
	return c.enableFileSharing.CallUnary(ctx, req)
}

// DisableFileSharing calls ionscale.v1.IonscaleService.DisableFileSharing.
func (c *ionscaleServiceClient) DisableFileSharing(ctx context.Context, req *connect_go.Request[v1.DisableFileSharingRequest]) (*connect_go.Response[v1.DisableFileSharingResponse], error) {
	return c.disableFileSharing.CallUnary(ctx, req)
}

// EnableServiceCollection calls ionscale.v1.IonscaleService.EnableServiceCollection.
func (c *ionscaleServiceClient) EnableServiceCollection(ctx context.Context, req *connect_go.Request[v1.EnableServiceCollectionRequest]) (*connect_go.Response[v1.EnableServiceCollectionResponse], error) {
	return c.enableServiceCollection.CallUnary(ctx, req)
}

// DisableServiceCollection calls ionscale.v1.IonscaleService.DisableServiceCollection.
func (c *ionscaleServiceClient) DisableServiceCollection(ctx context.Context, req *connect_go.Request[v1.DisableServiceCollectionRequest]) (*connect_go.Response[v1.DisableServiceCollectionResponse], error) {
	return c.disableServiceCollection.CallUnary(ctx, req)
}

// EnableSSH calls ionscale.v1.IonscaleService.EnableSSH.
func (c *ionscaleServiceClient) EnableSSH(ctx context.Context, req *connect_go.Request[v1.EnableSSHRequest]) (*connect_go.Response[v1.EnableSSHResponse], error) {
	return c.enableSSH.CallUnary(ctx, req)
}

// DisableSSH calls ionscale.v1.IonscaleService.DisableSSH.
func (c *ionscaleServiceClient) DisableSSH(ctx context.Context, req *connect_go.Request[v1.DisableSSHRequest]) (*connect_go.Response[v1.DisableSSHResponse], error) {
	return c.disableSSH.CallUnary(ctx, req)
}

// GetDNSConfig calls ionscale.v1.IonscaleService.GetDNSConfig.
func (c *ionscaleServiceClient) GetDNSConfig(ctx context.Context, req *connect_go.Request[v1.GetDNSConfigRequest]) (*connect_go.Response[v1.GetDNSConfigResponse], error) {
	return c.getDNSConfig.CallUnary(ctx, req)
}

// SetDNSConfig calls ionscale.v1.IonscaleService.SetDNSConfig.
func (c *ionscaleServiceClient) SetDNSConfig(ctx context.Context, req *connect_go.Request[v1.SetDNSConfigRequest]) (*connect_go.Response[v1.SetDNSConfigResponse], error) {
	return c.setDNSConfig.CallUnary(ctx, req)
}

// GetIAMPolicy calls ionscale.v1.IonscaleService.GetIAMPolicy.
func (c *ionscaleServiceClient) GetIAMPolicy(ctx context.Context, req *connect_go.Request[v1.GetIAMPolicyRequest]) (*connect_go.Response[v1.GetIAMPolicyResponse], error) {
	return c.getIAMPolicy.CallUnary(ctx, req)
}

// SetIAMPolicy calls ionscale.v1.IonscaleService.SetIAMPolicy.
func (c *ionscaleServiceClient) SetIAMPolicy(ctx context.Context, req *connect_go.Request[v1.SetIAMPolicyRequest]) (*connect_go.Response[v1.SetIAMPolicyResponse], error) {
	return c.setIAMPolicy.CallUnary(ctx, req)
}

// GetACLPolicy calls ionscale.v1.IonscaleService.GetACLPolicy.
func (c *ionscaleServiceClient) GetACLPolicy(ctx context.Context, req *connect_go.Request[v1.GetACLPolicyRequest]) (*connect_go.Response[v1.GetACLPolicyResponse], error) {
	return c.getACLPolicy.CallUnary(ctx, req)
}

// SetACLPolicy calls ionscale.v1.IonscaleService.SetACLPolicy.
func (c *ionscaleServiceClient) SetACLPolicy(ctx context.Context, req *connect_go.Request[v1.SetACLPolicyRequest]) (*connect_go.Response[v1.SetACLPolicyResponse], error) {
	return c.setACLPolicy.CallUnary(ctx, req)
}

// GetAuthKey calls ionscale.v1.IonscaleService.GetAuthKey.
func (c *ionscaleServiceClient) GetAuthKey(ctx context.Context, req *connect_go.Request[v1.GetAuthKeyRequest]) (*connect_go.Response[v1.GetAuthKeyResponse], error) {
	return c.getAuthKey.CallUnary(ctx, req)
}

// CreateAuthKey calls ionscale.v1.IonscaleService.CreateAuthKey.
func (c *ionscaleServiceClient) CreateAuthKey(ctx context.Context, req *connect_go.Request[v1.CreateAuthKeyRequest]) (*connect_go.Response[v1.CreateAuthKeyResponse], error) {
	return c.createAuthKey.CallUnary(ctx, req)
}

// DeleteAuthKey calls ionscale.v1.IonscaleService.DeleteAuthKey.
func (c *ionscaleServiceClient) DeleteAuthKey(ctx context.Context, req *connect_go.Request[v1.DeleteAuthKeyRequest]) (*connect_go.Response[v1.DeleteAuthKeyResponse], error) {
	return c.deleteAuthKey.CallUnary(ctx, req)
}

// ListAuthKeys calls ionscale.v1.IonscaleService.ListAuthKeys.
func (c *ionscaleServiceClient) ListAuthKeys(ctx context.Context, req *connect_go.Request[v1.ListAuthKeysRequest]) (*connect_go.Response[v1.ListAuthKeysResponse], error) {
	return c.listAuthKeys.CallUnary(ctx, req)
}

// ListUsers calls ionscale.v1.IonscaleService.ListUsers.
func (c *ionscaleServiceClient) ListUsers(ctx context.Context, req *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// DeleteUser calls ionscale.v1.IonscaleService.DeleteUser.
func (c *ionscaleServiceClient) DeleteUser(ctx context.Context, req *connect_go.Request[v1.DeleteUserRequest]) (*connect_go.Response[v1.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// GetMachine calls ionscale.v1.IonscaleService.GetMachine.
func (c *ionscaleServiceClient) GetMachine(ctx context.Context, req *connect_go.Request[v1.GetMachineRequest]) (*connect_go.Response[v1.GetMachineResponse], error) {
	return c.getMachine.CallUnary(ctx, req)
}

// ListMachines calls ionscale.v1.IonscaleService.ListMachines.
func (c *ionscaleServiceClient) ListMachines(ctx context.Context, req *connect_go.Request[v1.ListMachinesRequest]) (*connect_go.Response[v1.ListMachinesResponse], error) {
	return c.listMachines.CallUnary(ctx, req)
}

// ExpireMachine calls ionscale.v1.IonscaleService.ExpireMachine.
func (c *ionscaleServiceClient) ExpireMachine(ctx context.Context, req *connect_go.Request[v1.ExpireMachineRequest]) (*connect_go.Response[v1.ExpireMachineResponse], error) {
	return c.expireMachine.CallUnary(ctx, req)
}

// DeleteMachine calls ionscale.v1.IonscaleService.DeleteMachine.
func (c *ionscaleServiceClient) DeleteMachine(ctx context.Context, req *connect_go.Request[v1.DeleteMachineRequest]) (*connect_go.Response[v1.DeleteMachineResponse], error) {
	return c.deleteMachine.CallUnary(ctx, req)
}

// SetMachineKeyExpiry calls ionscale.v1.IonscaleService.SetMachineKeyExpiry.
func (c *ionscaleServiceClient) SetMachineKeyExpiry(ctx context.Context, req *connect_go.Request[v1.SetMachineKeyExpiryRequest]) (*connect_go.Response[v1.SetMachineKeyExpiryResponse], error) {
	return c.setMachineKeyExpiry.CallUnary(ctx, req)
}

// GetMachineRoutes calls ionscale.v1.IonscaleService.GetMachineRoutes.
func (c *ionscaleServiceClient) GetMachineRoutes(ctx context.Context, req *connect_go.Request[v1.GetMachineRoutesRequest]) (*connect_go.Response[v1.GetMachineRoutesResponse], error) {
	return c.getMachineRoutes.CallUnary(ctx, req)
}

// EnableMachineRoutes calls ionscale.v1.IonscaleService.EnableMachineRoutes.
func (c *ionscaleServiceClient) EnableMachineRoutes(ctx context.Context, req *connect_go.Request[v1.EnableMachineRoutesRequest]) (*connect_go.Response[v1.EnableMachineRoutesResponse], error) {
	return c.enableMachineRoutes.CallUnary(ctx, req)
}

// DisableMachineRoutes calls ionscale.v1.IonscaleService.DisableMachineRoutes.
func (c *ionscaleServiceClient) DisableMachineRoutes(ctx context.Context, req *connect_go.Request[v1.DisableMachineRoutesRequest]) (*connect_go.Response[v1.DisableMachineRoutesResponse], error) {
	return c.disableMachineRoutes.CallUnary(ctx, req)
}

// EnableExitNode calls ionscale.v1.IonscaleService.EnableExitNode.
func (c *ionscaleServiceClient) EnableExitNode(ctx context.Context, req *connect_go.Request[v1.EnableExitNodeRequest]) (*connect_go.Response[v1.EnableExitNodeResponse], error) {
	return c.enableExitNode.CallUnary(ctx, req)
}

// DisableExitNode calls ionscale.v1.IonscaleService.DisableExitNode.
func (c *ionscaleServiceClient) DisableExitNode(ctx context.Context, req *connect_go.Request[v1.DisableExitNodeRequest]) (*connect_go.Response[v1.DisableExitNodeResponse], error) {
	return c.disableExitNode.CallUnary(ctx, req)
}

// EnableHttpsCertificates calls ionscale.v1.IonscaleService.EnableHttpsCertificates.
func (c *ionscaleServiceClient) EnableHttpsCertificates(ctx context.Context, req *connect_go.Request[v1.EnableHttpsCertificatesRequest]) (*connect_go.Response[v1.EnableHttpsCertificatesResponse], error) {
	return c.enableHttpsCertificates.CallUnary(ctx, req)
}

// DisableHttpsCertificates calls ionscale.v1.IonscaleService.DisableHttpsCertificates.
func (c *ionscaleServiceClient) DisableHttpsCertificates(ctx context.Context, req *connect_go.Request[v1.DisableHttpsCertificatesRequest]) (*connect_go.Response[v1.DisableHttpsCertificatesResponse], error) {
	return c.disableHttpsCertificates.CallUnary(ctx, req)
}

// IonscaleServiceHandler is an implementation of the ionscale.v1.IonscaleService service.
type IonscaleServiceHandler interface {
	GetVersion(context.Context, *connect_go.Request[v1.GetVersionRequest]) (*connect_go.Response[v1.GetVersionResponse], error)
	Authenticate(context.Context, *connect_go.Request[v1.AuthenticateRequest], *connect_go.ServerStream[v1.AuthenticateResponse]) error
	GetDefaultDERPMap(context.Context, *connect_go.Request[v1.GetDefaultDERPMapRequest]) (*connect_go.Response[v1.GetDefaultDERPMapResponse], error)
	SetDefaultDERPMap(context.Context, *connect_go.Request[v1.SetDefaultDERPMapRequest]) (*connect_go.Response[v1.SetDefaultDERPMapResponse], error)
	ResetDefaultDERPMap(context.Context, *connect_go.Request[v1.ResetDefaultDERPMapRequest]) (*connect_go.Response[v1.ResetDefaultDERPMapResponse], error)
	CreateTailnet(context.Context, *connect_go.Request[v1.CreateTailnetRequest]) (*connect_go.Response[v1.CreateTailnetResponse], error)
	GetTailnet(context.Context, *connect_go.Request[v1.GetTailnetRequest]) (*connect_go.Response[v1.GetTailnetResponse], error)
	ListTailnets(context.Context, *connect_go.Request[v1.ListTailnetsRequest]) (*connect_go.Response[v1.ListTailnetsResponse], error)
	DeleteTailnet(context.Context, *connect_go.Request[v1.DeleteTailnetRequest]) (*connect_go.Response[v1.DeleteTailnetResponse], error)
	GetDERPMap(context.Context, *connect_go.Request[v1.GetDERPMapRequest]) (*connect_go.Response[v1.GetDERPMapResponse], error)
	SetDERPMap(context.Context, *connect_go.Request[v1.SetDERPMapRequest]) (*connect_go.Response[v1.SetDERPMapResponse], error)
	ResetDERPMap(context.Context, *connect_go.Request[v1.ResetDERPMapRequest]) (*connect_go.Response[v1.ResetDERPMapResponse], error)
	EnableFileSharing(context.Context, *connect_go.Request[v1.EnableFileSharingRequest]) (*connect_go.Response[v1.EnableFileSharingResponse], error)
	DisableFileSharing(context.Context, *connect_go.Request[v1.DisableFileSharingRequest]) (*connect_go.Response[v1.DisableFileSharingResponse], error)
	EnableServiceCollection(context.Context, *connect_go.Request[v1.EnableServiceCollectionRequest]) (*connect_go.Response[v1.EnableServiceCollectionResponse], error)
	DisableServiceCollection(context.Context, *connect_go.Request[v1.DisableServiceCollectionRequest]) (*connect_go.Response[v1.DisableServiceCollectionResponse], error)
	EnableSSH(context.Context, *connect_go.Request[v1.EnableSSHRequest]) (*connect_go.Response[v1.EnableSSHResponse], error)
	DisableSSH(context.Context, *connect_go.Request[v1.DisableSSHRequest]) (*connect_go.Response[v1.DisableSSHResponse], error)
	GetDNSConfig(context.Context, *connect_go.Request[v1.GetDNSConfigRequest]) (*connect_go.Response[v1.GetDNSConfigResponse], error)
	SetDNSConfig(context.Context, *connect_go.Request[v1.SetDNSConfigRequest]) (*connect_go.Response[v1.SetDNSConfigResponse], error)
	GetIAMPolicy(context.Context, *connect_go.Request[v1.GetIAMPolicyRequest]) (*connect_go.Response[v1.GetIAMPolicyResponse], error)
	SetIAMPolicy(context.Context, *connect_go.Request[v1.SetIAMPolicyRequest]) (*connect_go.Response[v1.SetIAMPolicyResponse], error)
	GetACLPolicy(context.Context, *connect_go.Request[v1.GetACLPolicyRequest]) (*connect_go.Response[v1.GetACLPolicyResponse], error)
	SetACLPolicy(context.Context, *connect_go.Request[v1.SetACLPolicyRequest]) (*connect_go.Response[v1.SetACLPolicyResponse], error)
	GetAuthKey(context.Context, *connect_go.Request[v1.GetAuthKeyRequest]) (*connect_go.Response[v1.GetAuthKeyResponse], error)
	CreateAuthKey(context.Context, *connect_go.Request[v1.CreateAuthKeyRequest]) (*connect_go.Response[v1.CreateAuthKeyResponse], error)
	DeleteAuthKey(context.Context, *connect_go.Request[v1.DeleteAuthKeyRequest]) (*connect_go.Response[v1.DeleteAuthKeyResponse], error)
	ListAuthKeys(context.Context, *connect_go.Request[v1.ListAuthKeysRequest]) (*connect_go.Response[v1.ListAuthKeysResponse], error)
	ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error)
	DeleteUser(context.Context, *connect_go.Request[v1.DeleteUserRequest]) (*connect_go.Response[v1.DeleteUserResponse], error)
	GetMachine(context.Context, *connect_go.Request[v1.GetMachineRequest]) (*connect_go.Response[v1.GetMachineResponse], error)
	ListMachines(context.Context, *connect_go.Request[v1.ListMachinesRequest]) (*connect_go.Response[v1.ListMachinesResponse], error)
	ExpireMachine(context.Context, *connect_go.Request[v1.ExpireMachineRequest]) (*connect_go.Response[v1.ExpireMachineResponse], error)
	DeleteMachine(context.Context, *connect_go.Request[v1.DeleteMachineRequest]) (*connect_go.Response[v1.DeleteMachineResponse], error)
	SetMachineKeyExpiry(context.Context, *connect_go.Request[v1.SetMachineKeyExpiryRequest]) (*connect_go.Response[v1.SetMachineKeyExpiryResponse], error)
	GetMachineRoutes(context.Context, *connect_go.Request[v1.GetMachineRoutesRequest]) (*connect_go.Response[v1.GetMachineRoutesResponse], error)
	EnableMachineRoutes(context.Context, *connect_go.Request[v1.EnableMachineRoutesRequest]) (*connect_go.Response[v1.EnableMachineRoutesResponse], error)
	DisableMachineRoutes(context.Context, *connect_go.Request[v1.DisableMachineRoutesRequest]) (*connect_go.Response[v1.DisableMachineRoutesResponse], error)
	EnableExitNode(context.Context, *connect_go.Request[v1.EnableExitNodeRequest]) (*connect_go.Response[v1.EnableExitNodeResponse], error)
	DisableExitNode(context.Context, *connect_go.Request[v1.DisableExitNodeRequest]) (*connect_go.Response[v1.DisableExitNodeResponse], error)
	EnableHttpsCertificates(context.Context, *connect_go.Request[v1.EnableHttpsCertificatesRequest]) (*connect_go.Response[v1.EnableHttpsCertificatesResponse], error)
	DisableHttpsCertificates(context.Context, *connect_go.Request[v1.DisableHttpsCertificatesRequest]) (*connect_go.Response[v1.DisableHttpsCertificatesResponse], error)
}

// NewIonscaleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIonscaleServiceHandler(svc IonscaleServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/ionscale.v1.IonscaleService/GetVersion", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetVersion",
		svc.GetVersion,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/Authenticate", connect_go.NewServerStreamHandler(
		"/ionscale.v1.IonscaleService/Authenticate",
		svc.Authenticate,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/GetDefaultDERPMap", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetDefaultDERPMap",
		svc.GetDefaultDERPMap,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/SetDefaultDERPMap", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/SetDefaultDERPMap",
		svc.SetDefaultDERPMap,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/ResetDefaultDERPMap", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/ResetDefaultDERPMap",
		svc.ResetDefaultDERPMap,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/CreateTailnet", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/CreateTailnet",
		svc.CreateTailnet,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/GetTailnet", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetTailnet",
		svc.GetTailnet,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/ListTailnets", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/ListTailnets",
		svc.ListTailnets,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/DeleteTailnet", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/DeleteTailnet",
		svc.DeleteTailnet,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/GetDERPMap", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetDERPMap",
		svc.GetDERPMap,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/SetDERPMap", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/SetDERPMap",
		svc.SetDERPMap,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/ResetDERPMap", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/ResetDERPMap",
		svc.ResetDERPMap,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/EnableFileSharing", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/EnableFileSharing",
		svc.EnableFileSharing,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/DisableFileSharing", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/DisableFileSharing",
		svc.DisableFileSharing,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/EnableServiceCollection", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/EnableServiceCollection",
		svc.EnableServiceCollection,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/DisableServiceCollection", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/DisableServiceCollection",
		svc.DisableServiceCollection,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/EnableSSH", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/EnableSSH",
		svc.EnableSSH,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/DisableSSH", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/DisableSSH",
		svc.DisableSSH,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/GetDNSConfig", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetDNSConfig",
		svc.GetDNSConfig,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/SetDNSConfig", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/SetDNSConfig",
		svc.SetDNSConfig,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/GetIAMPolicy", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetIAMPolicy",
		svc.GetIAMPolicy,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/SetIAMPolicy", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/SetIAMPolicy",
		svc.SetIAMPolicy,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/GetACLPolicy", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetACLPolicy",
		svc.GetACLPolicy,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/SetACLPolicy", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/SetACLPolicy",
		svc.SetACLPolicy,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/GetAuthKey", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetAuthKey",
		svc.GetAuthKey,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/CreateAuthKey", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/CreateAuthKey",
		svc.CreateAuthKey,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/DeleteAuthKey", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/DeleteAuthKey",
		svc.DeleteAuthKey,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/ListAuthKeys", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/ListAuthKeys",
		svc.ListAuthKeys,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/ListUsers", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/ListUsers",
		svc.ListUsers,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/DeleteUser", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/DeleteUser",
		svc.DeleteUser,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/GetMachine", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetMachine",
		svc.GetMachine,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/ListMachines", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/ListMachines",
		svc.ListMachines,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/ExpireMachine", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/ExpireMachine",
		svc.ExpireMachine,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/DeleteMachine", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/DeleteMachine",
		svc.DeleteMachine,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/SetMachineKeyExpiry", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/SetMachineKeyExpiry",
		svc.SetMachineKeyExpiry,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/GetMachineRoutes", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/GetMachineRoutes",
		svc.GetMachineRoutes,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/EnableMachineRoutes", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/EnableMachineRoutes",
		svc.EnableMachineRoutes,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/DisableMachineRoutes", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/DisableMachineRoutes",
		svc.DisableMachineRoutes,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/EnableExitNode", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/EnableExitNode",
		svc.EnableExitNode,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/DisableExitNode", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/DisableExitNode",
		svc.DisableExitNode,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/EnableHttpsCertificates", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/EnableHttpsCertificates",
		svc.EnableHttpsCertificates,
		opts...,
	))
	mux.Handle("/ionscale.v1.IonscaleService/DisableHttpsCertificates", connect_go.NewUnaryHandler(
		"/ionscale.v1.IonscaleService/DisableHttpsCertificates",
		svc.DisableHttpsCertificates,
		opts...,
	))
	return "/ionscale.v1.IonscaleService/", mux
}

// UnimplementedIonscaleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIonscaleServiceHandler struct{}

func (UnimplementedIonscaleServiceHandler) GetVersion(context.Context, *connect_go.Request[v1.GetVersionRequest]) (*connect_go.Response[v1.GetVersionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetVersion is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) Authenticate(context.Context, *connect_go.Request[v1.AuthenticateRequest], *connect_go.ServerStream[v1.AuthenticateResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.Authenticate is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetDefaultDERPMap(context.Context, *connect_go.Request[v1.GetDefaultDERPMapRequest]) (*connect_go.Response[v1.GetDefaultDERPMapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetDefaultDERPMap is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) SetDefaultDERPMap(context.Context, *connect_go.Request[v1.SetDefaultDERPMapRequest]) (*connect_go.Response[v1.SetDefaultDERPMapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.SetDefaultDERPMap is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ResetDefaultDERPMap(context.Context, *connect_go.Request[v1.ResetDefaultDERPMapRequest]) (*connect_go.Response[v1.ResetDefaultDERPMapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ResetDefaultDERPMap is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) CreateTailnet(context.Context, *connect_go.Request[v1.CreateTailnetRequest]) (*connect_go.Response[v1.CreateTailnetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.CreateTailnet is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetTailnet(context.Context, *connect_go.Request[v1.GetTailnetRequest]) (*connect_go.Response[v1.GetTailnetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetTailnet is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ListTailnets(context.Context, *connect_go.Request[v1.ListTailnetsRequest]) (*connect_go.Response[v1.ListTailnetsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ListTailnets is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DeleteTailnet(context.Context, *connect_go.Request[v1.DeleteTailnetRequest]) (*connect_go.Response[v1.DeleteTailnetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DeleteTailnet is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetDERPMap(context.Context, *connect_go.Request[v1.GetDERPMapRequest]) (*connect_go.Response[v1.GetDERPMapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetDERPMap is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) SetDERPMap(context.Context, *connect_go.Request[v1.SetDERPMapRequest]) (*connect_go.Response[v1.SetDERPMapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.SetDERPMap is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ResetDERPMap(context.Context, *connect_go.Request[v1.ResetDERPMapRequest]) (*connect_go.Response[v1.ResetDERPMapResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ResetDERPMap is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) EnableFileSharing(context.Context, *connect_go.Request[v1.EnableFileSharingRequest]) (*connect_go.Response[v1.EnableFileSharingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.EnableFileSharing is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DisableFileSharing(context.Context, *connect_go.Request[v1.DisableFileSharingRequest]) (*connect_go.Response[v1.DisableFileSharingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DisableFileSharing is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) EnableServiceCollection(context.Context, *connect_go.Request[v1.EnableServiceCollectionRequest]) (*connect_go.Response[v1.EnableServiceCollectionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.EnableServiceCollection is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DisableServiceCollection(context.Context, *connect_go.Request[v1.DisableServiceCollectionRequest]) (*connect_go.Response[v1.DisableServiceCollectionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DisableServiceCollection is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) EnableSSH(context.Context, *connect_go.Request[v1.EnableSSHRequest]) (*connect_go.Response[v1.EnableSSHResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.EnableSSH is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DisableSSH(context.Context, *connect_go.Request[v1.DisableSSHRequest]) (*connect_go.Response[v1.DisableSSHResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DisableSSH is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetDNSConfig(context.Context, *connect_go.Request[v1.GetDNSConfigRequest]) (*connect_go.Response[v1.GetDNSConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetDNSConfig is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) SetDNSConfig(context.Context, *connect_go.Request[v1.SetDNSConfigRequest]) (*connect_go.Response[v1.SetDNSConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.SetDNSConfig is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetIAMPolicy(context.Context, *connect_go.Request[v1.GetIAMPolicyRequest]) (*connect_go.Response[v1.GetIAMPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetIAMPolicy is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) SetIAMPolicy(context.Context, *connect_go.Request[v1.SetIAMPolicyRequest]) (*connect_go.Response[v1.SetIAMPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.SetIAMPolicy is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetACLPolicy(context.Context, *connect_go.Request[v1.GetACLPolicyRequest]) (*connect_go.Response[v1.GetACLPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetACLPolicy is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) SetACLPolicy(context.Context, *connect_go.Request[v1.SetACLPolicyRequest]) (*connect_go.Response[v1.SetACLPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.SetACLPolicy is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetAuthKey(context.Context, *connect_go.Request[v1.GetAuthKeyRequest]) (*connect_go.Response[v1.GetAuthKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetAuthKey is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) CreateAuthKey(context.Context, *connect_go.Request[v1.CreateAuthKeyRequest]) (*connect_go.Response[v1.CreateAuthKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.CreateAuthKey is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DeleteAuthKey(context.Context, *connect_go.Request[v1.DeleteAuthKeyRequest]) (*connect_go.Response[v1.DeleteAuthKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DeleteAuthKey is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ListAuthKeys(context.Context, *connect_go.Request[v1.ListAuthKeysRequest]) (*connect_go.Response[v1.ListAuthKeysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ListAuthKeys is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ListUsers(context.Context, *connect_go.Request[v1.ListUsersRequest]) (*connect_go.Response[v1.ListUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ListUsers is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DeleteUser(context.Context, *connect_go.Request[v1.DeleteUserRequest]) (*connect_go.Response[v1.DeleteUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DeleteUser is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetMachine(context.Context, *connect_go.Request[v1.GetMachineRequest]) (*connect_go.Response[v1.GetMachineResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetMachine is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ListMachines(context.Context, *connect_go.Request[v1.ListMachinesRequest]) (*connect_go.Response[v1.ListMachinesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ListMachines is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) ExpireMachine(context.Context, *connect_go.Request[v1.ExpireMachineRequest]) (*connect_go.Response[v1.ExpireMachineResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.ExpireMachine is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DeleteMachine(context.Context, *connect_go.Request[v1.DeleteMachineRequest]) (*connect_go.Response[v1.DeleteMachineResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DeleteMachine is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) SetMachineKeyExpiry(context.Context, *connect_go.Request[v1.SetMachineKeyExpiryRequest]) (*connect_go.Response[v1.SetMachineKeyExpiryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.SetMachineKeyExpiry is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) GetMachineRoutes(context.Context, *connect_go.Request[v1.GetMachineRoutesRequest]) (*connect_go.Response[v1.GetMachineRoutesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.GetMachineRoutes is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) EnableMachineRoutes(context.Context, *connect_go.Request[v1.EnableMachineRoutesRequest]) (*connect_go.Response[v1.EnableMachineRoutesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.EnableMachineRoutes is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DisableMachineRoutes(context.Context, *connect_go.Request[v1.DisableMachineRoutesRequest]) (*connect_go.Response[v1.DisableMachineRoutesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DisableMachineRoutes is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) EnableExitNode(context.Context, *connect_go.Request[v1.EnableExitNodeRequest]) (*connect_go.Response[v1.EnableExitNodeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.EnableExitNode is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DisableExitNode(context.Context, *connect_go.Request[v1.DisableExitNodeRequest]) (*connect_go.Response[v1.DisableExitNodeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DisableExitNode is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) EnableHttpsCertificates(context.Context, *connect_go.Request[v1.EnableHttpsCertificatesRequest]) (*connect_go.Response[v1.EnableHttpsCertificatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.EnableHttpsCertificates is not implemented"))
}

func (UnimplementedIonscaleServiceHandler) DisableHttpsCertificates(context.Context, *connect_go.Request[v1.DisableHttpsCertificatesRequest]) (*connect_go.Response[v1.DisableHttpsCertificatesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ionscale.v1.IonscaleService.DisableHttpsCertificates is not implemented"))
}
